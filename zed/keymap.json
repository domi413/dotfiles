[
  {
    "context": "vim_mode != insert",
    "bindings": {
      // Go to next/previous selection
      "ctrl-k": "menu::SelectPrevious",
      "ctrl-j": "menu::SelectNext"
    }
  },
  {
    "context": "!Editor",
    "bindings": {
      "ctrl-w": "editor::DeleteToPreviousWordStart"
    }
  },
  {
    "context": "Editor && vim_mode == normal || Terminal || ExtensionManager",
    "bindings": {
      // Move to next/previous window
      "ctrl-p": "pane::ActivateNextItem",
      "ctrl-n": "pane::ActivatePreviousItem"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-k": "terminal_panel::ToggleFocus",
      "ctrl-j": null,

      // Create new terminal
      "ctrl-shift-n": "workspace::NewTerminal",

      // Split terminal
      "shift-alt-h": "pane::SplitLeft",
      "shift-alt-j": "pane::SplitDown",
      "shift-alt-k": "pane::SplitUp",
      "shift-alt-l": "pane::SplitRight"
    }
  },
  {
    "context": "BufferSearchBar",
    "bindings": {
      "ctrl-r": "search::ToggleReplace"
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      // Toggle case
      "space i": "vim::ChangeCase"
    }
  },
  {
    "context": "vim_mode == insert || vim_mode == replace || (showing_code_actions || showing_completions)",
    "bindings": {
      // Leave insert mode with jk
      "j k": "vim::NormalBefore"
    }
  },
  {
    "context": "vim_mode == insert || (showing_code_actions || showing_completions)",
    "bindings": {
      // Go to next/previous selection (in auto-completion)
      "ctrl-k": "editor::ContextMenuPrevious",
      "ctrl-j": "editor::ContextMenuNext",

      // Navigate within snippet placeholders
      "ctrl-l": "editor::Tab",
      "ctrl-h": "editor::Backtab",

      // Assistant inline completion
      "ctrl-.": "editor::NextEditPrediction",
      "ctrl-,": "editor::PreviousEditPrediction",
      "ctrl-space": "editor::AcceptPartialEditPrediction",
      "ctrl-f": "editor::AcceptEditPrediction",

      // Prevent tab from accepting suggestion
      "tab": "editor::Tab"
    }
  },

  {
    "context": "Editor && vim_mode == normal",
    "bindings": {
      // Disable cutting (Black-hole register)
      "x": ["workspace::SendKeystrokes", "\" _ x"],
      "shift-x": ["workspace::SendKeystrokes", "\" _ shift-x"]
    }
  },
  {
    "context": "Editor && vim_mode == normal || ProjectPanel",
    "bindings": {
      "s": "vim::PushSneak",
      "shift-s": "vim::PushSneakBackward",

      // Create new/close window
      "space n t": "workspace::NewFile",
      "space x": "pane::CloseActiveItem",

      // Window tiling
      "space s k": "pane::SplitUp",
      "space s j": "pane::SplitDown",
      "space s h": "pane::SplitLeft",
      "space s l": "pane::SplitRight",

      // tmux like navigation
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-h": "workspace::ActivatePaneLeft",

      // Remap Y to Neovim-like behavior
      "shift-y": ["workspace::SendKeystrokes", "y $"],

      // Repeat last macro
      "#": ["workspace::SendKeystrokes", "@ @"],

      // Create new line above/below in normal mode
      "space o": ["workspace::SendKeystrokes", "o escape"],
      "space O": ["workspace::SendKeystrokes", "shift-o escape"],

      // Save file
      "space w": "workspace::Save",

      // Toggle line wrapping
      "space $": "editor::ToggleSoftWrap",

      // Reopen last closed tab
      "space u": "pane::ReopenClosedItem",

      // Toggle docks
      "space t h": "workspace::ToggleLeftDock",
      "space t l": "workspace::ToggleRightDock",
      "space t j": "workspace::ToggleBottomDock",

      // Toggle Zen-Mode
      "space t z": "workspace::ToggleCenteredLayout",

      // Toggle outline
      "space t o": "outline::Toggle",

      // Toggle Assistant
      "space t a": "agent::ToggleFocus",

      // Toggle inline git diff
      "space g h ": "editor::ToggleSelectedDiffHunks",

      // Toggle inlay hints
      "space t t": "editor::ToggleInlayHints",

      // Diagnostic
      "space d n": "editor::GoToDiagnostic",
      "space d p": "editor::GoToPreviousDiagnostic",
      "space D": "diagnostics::Deploy",
      // "space d l": "diagnostics::Deploy",

      // Change theme
      "space f t": "theme_selector::Toggle",

      // Open marks
      "space f m": "vim::ToggleMarksView",

      // Open registers
      "space f r": "vim::ToggleRegistersView",

      // Open projects
      "space f p": "projects::OpenRecent",

      // Switch tabs
      "space s t": "tab_switcher::ToggleAll",

      // Insert from assistant
      "space a i": "assistant::InsertIntoEditor",

      // Tasks
      // Lazygit
      "space l g": [
        "task::Spawn",
        { "task_name": "LazyGit", "reveal_target": "center" }
      ],

      // Yazi
      "space e": [
        "task::Spawn",
        { "task_name": "Yazi", "reveal_target": "center" }
      ],

      // Fuzzy finder
      "space f f": [
        "task::Spawn",
        { "task_name": "File finder", "reveal_target": "center" }
      ],
      "space f c": [
        "task::Spawn",
        { "task_name": "Find in files", "reveal_target": "center" }
      ],

      // // LaTeX
      // // Compile LaTeX
      // "space l c": [
      //   "task::Spawn",
      //   { "task_name": "Compile LaTeX", "reveal_target": "center" }
      // ],
      // // Forward search
      // "space l p": [
      //   "task::Spawn",
      //   { "task_name": "Forward Search", "reveal_target": "center" }
      // ],

      // Run/Compile Code
      // "space space r": ["task::Spawn", { "task_name": "Run file" }],
      // "space space c": ["task::Spawn", { "task_name": "Compile file" }]
      "space space a": ["task::Spawn", { "task_name": "Compile file" }], // The following four lines are a workaround
      "space space b": ["task::Spawn", { "task_name": "Run file" }],
      "space space r": ["workspace::SendKeystrokes", "space w space space b"],
      "space space c": ["workspace::SendKeystrokes", "space w space space a"]
    }
  },
  {
    // Copy code from assistant
    "context": "AssistantPanel || vim_mode == normal",
    "bindings": {
      "space a c": "assistant::CopyCode"
    }
  }
]
