[
  {
    "bindings": {
      "shift-enter": "workspace::ToggleZoom"
    }
  },
  {
    "context": "MessageEditor > Editor",
    "bindings": {
      "enter": "editor::Newline",
      "ctrl-enter": "agent::Chat"
    }
  },
  {
    "context": "vim_mode != insert",
    "bindings": {
      // Go to next/previous selection
      "ctrl-k": "menu::SelectPrevious",
      "ctrl-j": "menu::SelectNext"
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      // Move to next/previous window
      "ctrl-p": "pane::ActivateNextItem",
      "ctrl-n": "pane::ActivatePreviousItem"
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      // Toggle case
      "space i": "vim::ChangeCase"
    }
  },
  {
    "context": "vim_mode == insert || vim_mode == replace",
    "bindings": {
      // Leave insert mode with jk
      "j k": "vim::NormalBefore"
    }
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      // Go to next/previous selection (in auto-completion and code actions)
      "ctrl-k": "editor::ContextMenuPrevious",
      "ctrl-j": "editor::ContextMenuNext",
      // Show completion (map behavior to neovim)
      "ctrl-p": "editor::ShowCompletions",
      "ctrl-n": "editor::ShowCompletions",
      // Navigate within snippet placeholders
      "ctrl-l": "editor::Tab",
      "ctrl-h": "editor::Backtab",
      // Assistant inline completion
      "ctrl-.": "editor::NextEditPrediction",
      "ctrl-,": "editor::PreviousEditPrediction",
      "alt-space": "editor::AcceptPartialEditPrediction",
      "alt-f": "editor::AcceptEditPrediction",
      // Prevent tab from accepting suggestion
      "tab": "editor::Tab"
    }
  },
  {
    "context": "Editor && vim_mode == normal",
    "bindings": {
      // Disable cutting (Black-hole register)
      "x": ["workspace::SendKeystrokes", "\" _ x"],
      "shift-x": ["workspace::SendKeystrokes", "\" _ shift-x"]
    }
  },
  {
    "context": "Editor && vim_mode == normal",
    "bindings": {
      "s": "vim::PushSneak",
      "shift-s": "vim::PushSneakBackward",
      // Remap Y to Neovim-like behavior
      "shift-y": ["workspace::SendKeystrokes", "y $"],
      // Why is this mapping missing?!
      "ctrl-w t": "workspace::NewFile",
      // Repeat last macro
      "#": ["workspace::SendKeystrokes", "@ @"],
      // Create new line above/below in normal mode
      "space o": ["workspace::SendKeystrokes", "o escape"],
      "space O": ["workspace::SendKeystrokes", "shift-o escape"],
      // Save file
      "space w": "workspace::Save",
      // Reopen last closed tab
      "space u": "pane::ReopenClosedItem",
      // Toggle docks
      "space t j": "workspace::ToggleBottomDock",
      "space t h": "workspace::ToggleLeftDock",
      "space t l": "workspace::ToggleRightDock",
      // Toggle line wrapping
      "space t w": "editor::ToggleSoftWrap",
      // Toggle outline
      "space t o": "outline::Toggle",
      // Toggle Assistant
      "space t a": "agent::ToggleFocus",
      // Toggle inline git diff
      "g h": "editor::ToggleSelectedDiffHunks",
      // Toggle inlay hints
      "space t t": "editor::ToggleInlayHints",
      // Toggle inline diagnostics
      "space t d": "editor::ToggleInlineDiagnostics",
      // Diagnostic
      "space d n": "editor::GoToDiagnostic",
      "space d p": "editor::GoToPreviousDiagnostic",
      "space D": "diagnostics::Deploy",
      // "space d l": "diagnostics::Deploy", // should show all current line diagnostics
      // Dismiss notification
      "space n d": "workspace::SuppressNotification",
      // Change theme
      "space f t": "theme_selector::Toggle",
      // Open marks
      "space f m": "vim::ToggleMarksView",
      // Open registers
      "space f r": "vim::ToggleRegistersView",
      // Open projects
      "space f p": "projects::OpenRecent",
      // Search files
      "space f f": "file_finder::Toggle",
      // *** Tasks ***
      // Task rerun
      "space r": "task::Rerun",
      // Lazygit
      "g l": [
        "task::Spawn",
        { "task_name": "LazyGit", "reveal_target": "center" }
      ],
      // Yazi
      "space e": [
        "task::Spawn",
        { "task_name": "Yazi", "reveal_target": "center" }
      ],
      // Fuzzy finder
      "space f c": [
        "task::Spawn",
        { "task_name": "Find in files", "reveal_target": "center" }
      ],
      // // LaTeX
      // // Compile LaTeX
      // "space l c": [
      //   "task::Spawn",
      //   { "task_name": "Compile LaTeX", "reveal_target": "center" }
      // ],
      // // Forward search
      // "space l p": [
      //   "task::Spawn",
      //   { "task_name": "Forward Search", "reveal_target": "center" }
      // ],
      // Run/Compile Code
      // "space space r": ["task::Spawn", { "task_name": "Run file" }],
      // "space space c": ["task::Spawn", { "task_name": "Compile file" }]
      "space space a": ["task::Spawn", { "task_name": "Compile file" }], // The following four lines are a workaround
      "space space b": ["task::Spawn", { "task_name": "Run file" }],
      "space space r": ["workspace::SendKeystrokes", "space w space space b"],
      "space space c": ["workspace::SendKeystrokes", "space w space space a"]
    }
  },
  {
    "context": "(vim_mode == insert || vim_mode == normal) && showing_signature_help && !showing_completions",
    "bindings": {
      "ctrl-k": "editor::SignatureHelpPrevious",
      "ctrl-j": "editor::SignatureHelpNext"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-k": "terminal_panel::ToggleFocus",
      "ctrl-j": null,
      "ctrl-p": null,
      "ctrl-n": null,
      // Create new terminal
      "ctrl-shift-t": "workspace::NewTerminal",
      // Split terminal
      "shift-alt-k": "pane::SplitUp",
      "shift-alt-j": "pane::SplitDown",
      "shift-alt-h": "pane::SplitLeft",
      "shift-alt-l": "pane::SplitRight",
      "ctrl-l": ["workspace::SendKeystrokes", "clear enter"],
      // Navigation
      "ctrl-shift-u": "terminal::ScrollLineUp",
      "ctrl-shift-d": "terminal::ScrollLineDown",
      "ctrl-shift-b": "terminal::ScrollPageUp",
      "ctrl-shift-f": "terminal::ScrollPageDown",
      "ctrl-shift-^": "terminal::ScrollToTop", // Not working
      "ctrl-shift-$": "terminal::ScrollToBottom", // Not working
      "ctrl-shift-p": "pane::ActivateNextItem",
      "ctrl-shift-n": "pane::ActivatePreviousItem",
      "ctrl-shift-k": "workspace::ActivatePaneUp",
      "ctrl-shift-j": "workspace::ActivatePaneDown",
      "ctrl-shift-h": "workspace::ActivatePaneLeft",
      "ctrl-shift-l": "workspace::ActivatePaneRight"
    }
  },
  {
    // nvim-tree like configuration
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "c": "project_panel::Copy",
      "d": "project_panel::Delete",
      "D": "project_panel::Trash",
      "g y": "workspace::CopyPath",
      "g e": "workspace::CopyRelativePath",
      "o": "project_panel::Open",
      "shift-o": "project_panel::OpenPermanent",
      "p": "project_panel::Paste",
      "q": "workspace::ToggleLeftDock",
      "r": "project_panel::Rename",
      "s": "workspace::OpenWithSystem",
      "S": "project_panel::NewSearchInDirectory",
      "W": "project_panel::CollapseAllEntries",
      "x": "project_panel::Cut",
      "y": "workspace::CopyPath",
      "shift-y": "workspace::CopyRelativePath"
      // `E` Expand All
      // `H` Toggle Filter: Dotfiles
      // `I` Toggle Filter: Git Ignore
    }
  },
  {
    "context": "Editor && mode != full",
    "bindings": {
      "ctrl-h": "editor::Backspace",
      "ctrl-u": "editor::DeleteToBeginningOfLine",
      "ctrl-w": "editor::DeleteToPreviousWordStart"
    }
  }
]
