[
  {
    "context": "vim_mode != insert",
    "bindings": {
      // Go to next/previous selection
      "ctrl-k": "menu::SelectPrev",
      "ctrl-j": "menu::SelectNext"
    }
  },
  {
    "context": "!Editor",
    "bindings": {
      "ctrl-w": "editor::DeleteToPreviousWordStart"
    }
  },
  {
    "context": "BufferSearchBar",
    "bindings": {
      "ctrl-r": "search::ToggleReplace"
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      // Toggle case
      "space i": "vim::ChangeCase"
    }
  },
  {
    "context": "vim_mode == insert || (showing_code_actions || showing_completions)",
    "bindings": {
      // Leave insert mode with jk
      "j k": "vim::NormalBefore",

      // Go to next/previous selection (in auto-completion)
      "ctrl-k": "editor::ContextMenuPrev",
      "ctrl-j": "editor::ContextMenuNext",

      // Navigate within snippet placeholders
      "ctrl-l": "editor::Tab",
      "ctrl-h": "editor::TabPrev",

      // Assistant inline completion
      "ctrl-.": "editor::NextInlineCompletion",
      "ctrl-,": "editor::PreviousInlineCompletion",
      "ctrl-space": "editor::AcceptPartialInlineCompletion",
      "ctrl-f": "editor::AcceptInlineCompletion",

      // Prevent tab from accepting suggestion
      "tab": "editor::Tab",

      // Trigger auto-completion
      "ctrl-shift-enter": "editor::ShowCompletions"
    }
  },
  {
    "context": "Editor && vim_mode == normal || ProjectPanel",
    "bindings": {
      // Toggle docks
      "space e": "workspace::ToggleLeftDock",
      "space E": "workspace::ToggleRightDock",

      // Disable cutting (Blackhole register)
      "x": ["workspace::SendKeystrokes", "\" _ x"],
      "shift-x": ["workspace::SendKeystrokes", "\" _ shift-x"],

      // Move to next/previous window
      "ctrl-p": "pane::ActivateNextItem",
      "ctrl-n": "pane::ActivatePrevItem",

      // Create new/close window
      "space n t": "workspace::NewFile",
      "space x": "pane::CloseActiveItem",

      // Window tiling
      "space s k": "pane::SplitUp",
      "space s j": "pane::SplitDown",
      "space s h": "pane::SplitLeft",
      "space s l": "pane::SplitRight",

      // tmux like navigation
      "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"],
      "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],

      // Remap Y to Neovim-like behavior
      "shift-y": ["workspace::SendKeystrokes", "y $"],

      // Repeat last macro
      "#": ["workspace::SendKeystrokes", "@ @"],

      // Create new line above/below in normal mode
      "space o": "editor::NewlineBelow",
      "space O": "editor::NewlineAbove",

      // Save file
      "space w": "workspace::Save",

      // Toggle line wrapping
      "space $": "editor::ToggleSoftWrap",

      // Toggle Zen-Mode
      "space t z": "workspace::ToggleCenteredLayout",

      // Toggle outline
      "space t o": "outline::Toggle",

      // Toggle Assistant
      "space t a": "assistant::ToggleFocus",

      // Rename
      "space r n": "editor::Rename",

      // Diagnostic
      "space d n": "editor::GoToDiagnostic",
      "space d p": "editor::GoToPrevDiagnostic",
      "space D": "diagnostics::Deploy",
      // Line diagnostics missing

      // Telescope (or It would be nice if it would be like telescope...)
      // "space f c": "fuzzy find content" // TODO:
      // "space f f": "file_finder::Toggle", // TODO: Not really what I am looking for
      "space f t": "theme_selector::Toggle",
      "space s t": "tab_switcher::Toggle",

      // Tasks
      // Lazygit
      "space l g": [
        "task::Spawn",
        { "task_name": "LazyGit", "reveal_target": "center" }
      ],

      // Run/Compile Code
      "space space r": ["task::Spawn", { "task_name": "Run file" }],
      "space space c": ["task::Spawn", { "task_name": "Compile file" }]
    }
  }
]
