{
    // EXPLORER
    "explorer.autoReveal": false,
    "explorer.confirmDelete": false,
    "explorer.confirmDragAndDrop": false,
    "explorer.decorations.colors": false,

    // WORKBENCH
    "workbench.activityBar.location": "top",
    "workbench.colorTheme": "Catppuccin Mocha",
    "workbench.editor.labelFormat": "default", // Use "short" to hide the path
    "workbench.iconTheme": "catppuccin-mocha",
    "workbench.list.smoothScrolling": true,
    "workbench.navigationControl.enabled": false,
    "workbench.startupEditor": "none",
    "workbench.tree.indent": 20,

    // EDITOR
    "editor.autoClosingOvertype": "always", // "Jumping" over the bracket when typing ")"
    "editor.bracketPairColorization.enabled": true, // Disable rainbow brackets
    "editor.cursorBlinking": "solid",
    "editor.cursorSmoothCaretAnimation": "on",
    "editor.fontFamily": "FiraCode Nerd Font",
    "editor.fontLigatures": "'cv01', 'cv02', 'cv15', 'cv19', 'cv23', 'cv29', 'cv31', 'ss01', 'ss03', 'ss05'",
    "[vhdl]": {
        "editor.fontLigatures": "'cv01', 'cv02', 'cv15', 'cv20', 'cv23', 'cv29', 'cv31', 'ss01', 'ss03', 'ss05'"
    },
    "editor.inlayHints.enabled": "off",
    "editor.lineNumbers": "relative",
    "editor.minimap.enabled": false,
    "editor.minimap.scale": 1,
    "editor.mouseWheelZoom": true, // Use ctrl + mouse wheel to zoom
    "editor.scrollbar.horizontalScrollbarSize": 0,
    "editor.scrollbar.verticalScrollbarSize": 0,
    "editor.smoothScrolling": true,
    "editor.stickyScroll.enabled": false,
    "editor.suggest.showWords": false,

    // OTHERS
    "breadcrumbs.enabled": false,
    "chat.commandCenter.enabled": false,
    "git.blame.editorDecoration.enabled": false,
    "git.blame.editorDecoration.template": "${authorName} - ${hashShort}",
    "git.enableSmartCommit": true,
    "security.workspace.trust.untrustedFiles": "open",
    "terminal.integrated.enableMultiLinePasteWarning": "never", // Disables paste warning in terminal
    "window.customTitleBarVisibility": "auto",
    "window.titleBarStyle": "custom", // Use the default VS Code title bar

    // Formatter
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false,
    "prettier.tabWidth": 4,
    "[c]": {
        "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd",
        // "editor.defaultFormatter": "ms-vscode.cpptools"
        "editor.formatOnSave": true
    },
    "[cpp]": {
        "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd",
        // "editor.defaultFormatter": "ms-vscode.cpptools"
        "editor.formatOnSave": true
    },
    "[java]": {
        "editor.defaultFormatter": "redhat.java"
    },
    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.formatOnSave": true
    },
    "[lua]": {
        "editor.defaultFormatter": "sumneko.lua"
    },
    "[nix]": {
        "editor.defaultFormatter": "jnoortheen.nix-ide"
    },
    "[python]": {
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit"
        },
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.formatOnSave": true,
    },
    
    // *** CMake ***
    "cmake.options.statusBarVisibility": "icon",
    "cmake.pinnedCommands": [
        "workbench.action.tasks.configureTaskRunner",
        "workbench.action.tasks.runTask"
    ],
    "cmake.showOptionsMovedNotification": false,
    "cmake.showConfigureWithDebuggerNotification": false,

    // *** Scroll percentage ***
    "scroll-percentage.cursor": "cursor",

    // *** TODO Tree ***
    "todo-tree.highlights.defaultHighlight": {
        "icon": "check",
        "type": "text",
        "foreground": "#89dcec",
        "iconColour": "#89dcec"
    },
    "todo-tree.highlights.customHighlight": {
        "TODO": {
            "icon": "check",
            "iconColour": "#89dcec",
            "gutterIcon": true
        },
        "FIXME": {
            "icon": "bug",
            "iconColour": "#f38ba9",
            "foreground": "#f38ba9",
            "gutterIcon": true
        }
    },

    // *** JAVA ***
    "redhat.telemetry.enabled": false,

    // *** PYLANCE ***
    "python.analysis.inlayHints.functionReturnTypes": true,
    "python.analysis.typeCheckingMode": "standard",

    // *** LATEX ***
    // Latex in vscode isn't really a good idea, but here you go
    "latex-workshop.view.pdf.invert": 1,
    "latex-workshop.intellisense.unimathsymbols.enabled": true,
    "latex-workshop.latex.recipe.default": "lastUsed",
    "latex-workshop.latex.rootFile.indicator": "\\begin{document}",
    "latex-workshop.latex.clean.subfolder.enabled": true,
    "latex-workshop.latex.clean.method": "glob",

    // *** C/CPP ***
    // Ensure that gdb & gcc are installed
    "C_Cpp.suggestSnippets": false,
    "C_Cpp.autocompleteAddParentheses": true,
    "C_Cpp.clang_format_fallbackStyle": "{\"BasedOnStyle\": \"LLVM\", \"IndentWidth\": 4, \"TabWidth\": 4}",
    "C_Cpp.default.compilerPath": "",
    "C_Cpp.default.includePath": ["/usr/include"],
    "C_Cpp.inlayHints.parameterNames.enabled": true,
    // "C_Cpp.intelliSenseEngine": "disabled",

    // *** CODEIUM ***
    "codeium.enableCodeLens": false,
    "codeium.enableConfig": {
        "*": true,
        "html": false,
        "plaintext": true,
        "cpp": false
    },

    // *** STATSBAR ***
    "statsBar.modules": ["cpuLoad", "networkSpeed", "memoUsage"],

    // *** VIM CONFIGURATION ***
    "vim.leader": "space",          // Set space as leader
    "vim.useSystemClipboard": true, // Enables copy to system clipboard
    "vim.useCtrlKeys": true,        // Override default behavior of ctrl keys
    "vim.hlsearch": true,           // Highlight search results
    // "vim.highlightedyank.enable": true,  // Highlight yanked text
    "extensions.experimental.affinity": { // To improve performance
        "vscodevim.vim": 1
    },

    // You can use the following command to trace keyboard shortcuts:
    // Developer: Toggle Keyboard Shortcuts Troubleshooting

    // ╭──────────────────────────────────────────────────────────╮
    // │ ***** VIM KEYBINDINGS *****                              │
    // ╰──────────────────────────────────────────────────────────╯

    // ╭──────────────────────────────────────────────────────────╮
    // │ Editor/Editing                                           │
    // ╰──────────────────────────────────────────────────────────╯
    "vim.insertModeKeyBindings": [
        // Use jk to exit insert mode
        { "before": ["j", "k"], "after": ["<Esc>"] }
    ],
    "vim.visualModeKeyBindings": [
        // Toggle case
        { "before": ["leader", "i"], "after": ["~"] }
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        // Show definition
        { "before": ["K"],
            // "commands": [ "editor.action.showDefinitionPreviewHover" ]
            "after": ["g", "h"]
        },
        // The following two options override the default behavior of the VSCode
        // VIMs'u' and 'C-r' keys. But because of the fact that they are not
        // working fully correctly, I prefer the default undo/redo behavior.
        { "before": ["u"],   "commands": ["undo"] },
        { "before": ["C-r"], "commands": ["redo"] }
    ],
    "vim.normalModeKeyBindings": [
        { "before": ["leader", "+"],      "commands": ["extension.vim_ctrl+a"] },                 // Increment number
        { "before": ["leader", "-"],      "commands": ["extension.vim_ctrl+x"] },                 // Decrement number
        { "before": ["leader", "o"],      "commands": ["editor.action.insertLineAfter"] },        // New line below
        { "before": ["leader", "O"],      "commands": ["editor.action.insertLineBefore"] },       // New line above
        { "before": ["leader", "i"],      "after":    ["~"] },                                    // Toggle case
        { "before": ["leader", "n", "h"], "commands": [":nohl"] },                                // Reset highlighting
        { "before": ["leader", "w"],      "commands": ["workbench.action.files.save"] },          // Save file
        { "before": ["leader", "$"],      "commands": ["editor.action.toggleWordWrap"] },         // Toggle line wrap
        { "before": ["leader", "d"],      "commands": ["editor.debug.action.toggleBreakpoint"] }, // Toggle breakpoint
        { "before": ["leader", "f", "v"], "commands": ["editor.action.formatDocument"] },         // Format document
        { "before": [","],                "after":    ["@","@"] },                                // Repat last macro

        // ╭──────────────────────────────────────────────────────────╮
        // │ LSP shorcuts                                             │
        // ╰──────────────────────────────────────────────────────────╯
        { "before": ["leader", "r", "n"], "commands": ["editor.action.rename"] }, // Rename variable
        { "before": ["g", "r"], "commands": ["editor.action.goToReferences"] },   // Go to references

        // ╭──────────────────────────────────────────────────────────╮
        // │ Tab management                                           │
        // ╰──────────────────────────────────────────────────────────╯
        { "before": ["C-p"],              "commands": ["workbench.action.nextEditor"] },            // Go to next tab
        { "before": ["C-n"],              "commands": ["workbench.action.previousEditor"] },        // Go to previous tab
        { "before": ["leader", "n", "t"], "commands": ["workbench.action.files.newUntitledFile"] }, // Open new tab
        { "before": ["leader", "x"],      "commands": ["workbench.action.closeActiveEditor"] },     // Close active tab
        
        // ╭──────────────────────────────────────────────────────────╮
        // │ Window tiling                                            │
        // ╰──────────────────────────────────────────────────────────╯
        { "before": ["leader", "s", "k"], "commands": ["workbench.action.splitEditorUp"] },    // Split editor up
        { "before": ["leader", "s", "j"], "commands": ["workbench.action.splitEditorDown"] },  // Split editor down
        { "before": ["leader", "s", "h"], "commands": ["workbench.action.splitEditorLeft"] },  // Split editor left
        { "before": ["leader", "s", "l"], "commands": ["workbench.action.splitEditorRight"] }, // Split editor right

        // ╭──────────────────────────────────────────────────────────╮
        // │ Window navigation                                        │
        // ╰──────────────────────────────────────────────────────────╯
        { "before": ["C-k"], "commands": ["workbench.action.navigateUp"] },    // Move editor up
        { "before": ["C-j"], "commands": ["workbench.action.navigateDown"] },  // Move editor down
        { "before": ["C-h"], "commands": ["workbench.action.navigateLeft"] },  // Move editor left
        { "before": ["C-l"], "commands": ["workbench.action.navigateRight"] }, // Move editor right

        // ╭──────────────────────────────────────────────────────────╮
        // │ Toggle panels                                            │
        // ╰──────────────────────────────────────────────────────────╯
        { "before": ["leader", "j"], "commands": ["workbench.action.terminal.toggleTerminal"] }, // Toggle terminal
        { "before": ["leader", "e"], "commands": ["workbench.action.toggleSidebarVisibility"] }, // Toggle File Explorer
        { "before": ["leader", "E"], "commands": ["workbench.action.toggleAuxiliaryBar"] },      // Toggle right sidebar

        // ╭──────────────────────────────────────────────────────────╮
        // │ Compile & Run & Debug                                    │
        // ╰──────────────────────────────────────────────────────────╯
        // The commands are always like this:
        // leader + leader + *([c]ompile/[r]un/[d]ebug)* + *first letter of language*
        // For example:
        // leader + leader + r + c   -> Will run a c file
        // Legend for what language which shortcut:
        // c/c++    -> c
        // CMake    -> m
        // go       -> g
        // java     -> j
        // python   -> p
        // rust     -> r

        // C / C++
        { "before": ["leader", "leader", "d", "c"], "commands": ["C_Cpp.BuildAndDebugFile"] },
        { "before": ["leader", "leader", "r", "c"], "commands": ["C_Cpp.BuildAndRunFile"] },

        // Python
        { "before": ["leader", "leader", "d", "p"], "commands": ["debugpy.debugInTerminal"] },
        { "before": ["leader", "leader", "r", "p"], "commands": ["python.execInTerminal-icon"] },

        // CMake
        { "before": ["leader", "leader", "s", "m"], "commands": ["cmake.selectLaunchTarget"] },
        { "before": ["leader", "leader", "r", "m"], "commands": ["cmake.launchTarget"] },

        // ╭──────────────────────────────────────────────────────────╮
        // │ Other commands                                           │
        // ╰──────────────────────────────────────────────────────────╯
        { "before": ["leader", ":"],      "commands": ["workbench.action.showCommands"], }, // Show command palette
        { "before": ["leader", "/"],      "commands": ["actions.find"] },                   // Local search (or in file search)
        { "before": ["leader", "f", "f"], "commands": ["workbench.action.findInFiles"] },   // Global search
        { "before": ["leader", "f", "t"], "commands": ["workbench.action.selectTheme"] },   // Change color scheme
        { "before": ["leader", "f", "r"], "after":    [":", "r","e","g", "enter"] },        // Open register
        { "before": ["leader", "s", "t"], "commands": ["workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"] }, // Switch tabs

        // ╭──────────────────────────────────────────────────────────╮
        // │ Disable cutting                                          │
        // ╰──────────────────────────────────────────────────────────╯
        // (Doesn't work, VSCODE will freeze)
        {
            // "before": ["x"],
            // "after": [ "\"", "_", "x" ]
        }
    ],
}