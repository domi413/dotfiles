{
    // EXPLORER
    "explorer.autoReveal": false,
    "explorer.confirmDelete": false,
    "explorer.confirmDragAndDrop": false,
    "explorer.decorations.colors": false,

    // WORKBENCH
    "workbench.activityBar.location": "top",
    "workbench.colorTheme": "Catppuccin Mocha",
    "workbench.list.smoothScrolling": true,
    "workbench.startupEditor": "none",
    "workbench.tree.indent": 20,

    // EDITOR
    "editor.cursorBlinking": "solid",
    "editor.cursorSmoothCaretAnimation": "on",
    "editor.fontFamily": "FiraCode Nerd Font",
    "editor.fontLigatures": "'cv01', 'cv02', 'cv15', 'cv19', 'cv23', 'cv29', 'cv31', 'ss01', 'ss03', 'ss05'",
    "[vhdl]": {
        "editor.fontLigatures": "'cv01', 'cv02', 'cv15', 'cv20', 'cv23', 'cv29', 'cv31', 'ss01', 'ss03', 'ss05'",
    },
    "editor.inlayHints.enabled": "off",
    "editor.lineNumbers": "relative",
    "editor.minimap.enabled": false,
    "editor.minimap.scale": 1,
    "editor.mouseWheelZoom": true, // Use ctrl + mouse wheel to zoom
    "editor.smoothScrolling": true,
    "editor.stickyScroll.enabled": false,
    "editor.suggest.showWords": false,

    // OTHERS
    "breadcrumbs.enabled": false,
    "git.enableSmartCommit": true,
    "liveServer.settings.donotShowInfoMsg": true,
    "security.workspace.trust.untrustedFiles": "open",
    "terminal.integrated.enableMultiLinePasteWarning": "never", // Disables paste warning in terminal
    "window.customTitleBarVisibility": "auto",
    "window.titleBarStyle": "custom", // Use the default VS Code title bar

    // Formatter
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false,
    "prettier.tabWidth": 4,
    "[python]": {
        "editor.defaultFormatter": "ms-python.black-formatter"
    },
    "[c]": {
        "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd"
        // "editor.defaultFormatter": "ms-vscode.cpptools"
    },
    "[cpp]": {
        "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd"
    },
    "[java]": {
        "editor.defaultFormatter": "redhat.java"
    },
    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.formatOnSave": true,
    },
    "[lua]": {
        "editor.defaultFormatter": "sumneko.lua"
    },

    // *** CMake ***
    "cmake.options.statusBarVisibility": "icon",
    "cmake.pinnedCommands": [
        "workbench.action.tasks.configureTaskRunner",
        "workbench.action.tasks.runTask"
    ],
    "cmake.showOptionsMovedNotification": false,
    "cmake.showConfigureWithDebuggerNotification": false,

    // *** TODO Tree ***
    "todo-tree.highlights.defaultHighlight": {
        "icon": "check",
        "type": "text",
        "foreground": "#89dcec",
        "iconColour": "#89dcec"
    },
    "todo-tree.highlights.customHighlight": {
        "TODO": {
            "icon": "check",
            "iconColour": "#89dcec",
            "gutterIcon": true
        },
        "FIXME": {
            "icon": "bug",
            "iconColour": "#f38ba9",
            "foreground": "#f38ba9",
            "gutterIcon": true
        }
    },

    // *** JAVA ***
    "redhat.telemetry.enabled": false,

    // *** PYLANCE ***
    "python.analysis.inlayHints.functionReturnTypes": true,
    "python.analysis.typeCheckingMode": "standard",

    // *** LATEX ***
    "latex-workshop.view.pdf.invert": 1,
    "latex-workshop.intellisense.unimathsymbols.enabled": true,
    "latex-workshop.latex.recipe.default": "lastUsed",
    "latex-workshop.latex.clean.subfolder.enabled": true,

    // *** C/CPP ***
    // Ensure that gdb & gcc are installed
    "C_Cpp.suggestSnippets": false,
    "C_Cpp.autocompleteAddParentheses": true,
    "C_Cpp.clang_format_fallbackStyle": "{\"BasedOnStyle\": \"LLVM\", \"IndentWidth\": 4, \"TabWidth\": 4}",
    "C_Cpp.default.compilerPath": "",
    "C_Cpp.default.includePath": ["/usr/include"],
    "C_Cpp.inlayHints.parameterNames.enabled": true,
    // "C_Cpp.intelliSenseEngine": "disabled",

    // *** CODEIUM ***
    "codeium.enableCodeLens": "hide_x",
    "codeium.enableConfig": {
        "*": true,
        "html": false,
        "plaintext": true,
        "cpp": false
    },

    // *** STATSBAR ***
    "statsBar.modules": ["cpuLoad", "networkSpeed", "memoUsage"],

    // *** VIM CONFIGURATION ***
    "vim.leader": "space", // Set space as leader
    "vim.useSystemClipboard": true, // Enables copy to system clipboard
    "vim.useCtrlKeys": true, // Override default behavior of ctrl keys
    "vim.hlsearch": true, // Highlight search results
    // "vim.highlightedyank.enable": true,  // Highlight yanked text

    // You can use the following command to trace keyboard shortcuts:
    // Developer: Toggle Keyboard Shortcuts Troubleshooting

    "vim.insertModeKeyBindings": [
        // Use jk to exit insert mode
        {
            "before": ["j", "k"],
            "after": ["<Esc>"]
        }
    ],
    "vim.visualModeKeyBindings": [
        // Toggle case
        {
            "before": ["leader", "i"],
            "after": ["~"]
        }
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        // Show definition
        {
            "before": ["K"],
            // "commands": [ "editor.action.showDefinitionPreviewHover" ]
            "after": ["g", "h"]
        },
        // The following two options override the default behavior of the VSCode
        // VIMs'u' and 'C-r' keys. But because of the fact that they are not
        // working fully correctly, I prefer the default undo  / redo behavior.
        {
            "before": ["u"],
            "commands": ["undo"]
        },
        {
            "before": ["C-r"],
            "commands": ["redo"]
        }
    ],
    "vim.normalModeKeyBindings": [
        // * ADDITIONAL MOTION-EDITING *
        // Increment number
        {
            "before": ["leader", "+"],
            "commands": ["extension.vim_ctrl+a"]
        },
        // Decrement number
        {
            "before": ["leader", "-"],
            "commands": ["extension.vim_ctrl+x"]
        },
        // New line below
        {
            "before": ["leader", "o"],
            "commands": ["editor.action.insertLineAfter"]
        },
        // New line beloW
        {
            "before": ["leader", "O"],
            "commands": ["editor.action.insertLineBefore"]
        },
        // Toggle case
        {
            "before": ["leader", "i"],
            "after": ["~"]
        },

        // * TAB & EDITOR NAVIGATION *
        // Go to next tab
        {
            "before": ["Tab"],
            "commands": ["workbench.action.nextEditor"]
        },
        // Go to previous tab
        {
            "before": ["S-Tab"],
            "commands": ["workbench.action.previousEditor"]
        },
        // Open new tab
        {
            "before": ["leader", "n", "t"],
            "commands": ["workbench.action.files.newUntitledFile"]
        },
        // Close active tab/editor
        {
            "before": ["leader", "x" ],
            "commands": ["workbench.action.closeActiveEditor"]
        },
        // Split editor up
        {
            "before": ["leader", "s", "k"],
            "commands": ["workbench.action.splitEditorUp"]
        },
        // Split editor down
        {
            "before": ["leader", "s", "j"],
            "commands": ["workbench.action.splitEditorDown"]
        },
        // Split editor left
        {
            "before": ["leader", "s", "h"],
            "commands": ["workbench.action.splitEditorLeft"]
        },
        // Split editor right
        {
            "before": ["leader", "s", "l"],
            "commands": ["workbench.action.splitEditorRight"]
        },
        // Move editor up
        {
            "before": ["leader", "m", "k"],
            "commands": ["workbench.action.navigateUp"]
        },
        // Move editor down
        {
            "before": ["leader", "m", "j"],
            "commands": ["workbench.action.navigateDown"]
        },
        // Move editor left
        {
            "before": ["leader", "m", "h"],
            "commands": ["workbench.action.navigateLeft"]
        },
        // Move editor right
        {
            "before": ["leader", "m", "l"],
            "commands": ["workbench.action.navigateRight"]
        },

        // * TOGGLE PANELS *
        // Toggle terminal
        {
            "before": ["leader", "j"],
            "commands": ["workbench.action.terminal.toggleTerminal"]
        },
        // Toggle sidebar
        {
            "before": ["leader", "e"],
            "commands": ["workbench.action.toggleSidebarVisibility"]
        },
        // Toggle right (auxiliary/secondary) sidebar
        {
            "before": ["leader", "E"],
            "commands": ["workbench.action.toggleAuxiliaryBar"]
        },

        // * COMPILE & RUN & DEBUG *
        // The commands are always like this:
        // leader + leader + *([c]ompile/[r]un/[d]ebug)* + *first letter of language*
        // For example:
        // leader + leader + r + c   -> Will run a c file
        // Legend for what language what shortcut:
        // c/c++    -> c
        // CMake    -> m
        // go       -> g
        // java     -> j
        // python   -> p
        // rust     -> r

        // C / C++
        {
            "before": ["leader", "leader", "d", "c"],
            "commands": ["C_Cpp.BuildAndDebugFile"]
        },
        {
            "before": ["leader", "leader", "r", "c"],
            "commands": ["C_Cpp.BuildAndRunFile"]
        },
        // Python
        {
            "before": ["leader", "leader", "d", "p"],
            "commands": ["debugpy.debugInTerminal"]
        },
        {
            "before": ["leader", "leader", "r", "p"],
            "commands": ["python.execInTerminal-icon"]
        },
        // CMake
        {
            "before": ["leader", "leader", "s", "m"],
            "commands": ["cmake.selectLaunchTarget"]
        },
        {
            "before": ["leader", "leader", "r", "m"],
            "commands": ["cmake.launchTarget"]
        },

        // * OTHER SHORT-CUTS *
        // Reset highlighting
        {
            "before": ["leader", "n", "h"],
            "commands": [":nohl"]
        },
        // Save file
        {
            "before": ["leader", "w"],
            "commands": ["workbench.action.files.save"]
        },
        // Paste from clipboard
        {
            "before": ["leader", "p"],
            "commands": ["editor.action.clipboardPasteAction"]
        },
        // Toggle line wrap
        {
            "before": ["leader", "$"],
            "commands": ["editor.action.toggleWordWrap"]
        },
        // Show command palette
        {
            "before": ["leader", ":"],
            "commands": ["workbench.action.showCommands"],
            "silent": true
        },
        // Toggle breakpoint
        {
            "before": ["leader", "d"],
            "commands": ["editor.debug.action.toggleBreakpoint"]
        },
        // Normal search
        {
            "before": ["leader", "/"],
            "commands": ["actions.find"]
        },
        // Global search
        {
            "before": ["leader", "f", "f"],
            "commands": ["workbench.action.findInFiles"]
        },
        // Local search (or in file search)
        {
            "before": ["leader", "f", "l"],
            "commands": ["actions.find"]
        },
        // Change color scheme
        {
            "before": ["leader", "f", "t"],
            "commands": ["workbench.action.selectTheme"]
        },
        // Format document
        {
            "before": ["leader", "f", "v"],
            "commands": ["editor.action.formatDocument"]
        },

        // * DISABLE CUTTING *
        // (Doen't work, VSCODE will freeze)
        {
            // "before": ["x"],
            // "after": [ "\"", "_", "x" ]
        }
    ],
    // To improve performance
    "extensions.experimental.affinity": {
        "vscodevim.vim": 1
    },
}
